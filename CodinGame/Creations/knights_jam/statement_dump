===== BEGIN Title =====
Knights Jam
=====  END  Title =====


===== BEGIN Statement =====
The <<knight>> is a chess piece that, when placed on the <<o>>-marked square, can move to any of the <<x>>-marked squares (as long as they are inside the board):```.x.x.
x...x
..o..
x...x
.x.x.```
Eight knights, numbered from {{1}} to {{8}}, have been placed on a {{3}}Ã—{{3}} board, leaving one single square empty ({{.}}).
They can neither attack each other, nor share the same square, nor leave the board: the only valid moves are <<jumps to the empty square>>.

Compute the <<minimum number of valid moves>> required to reach the following ordered configuration by any sequence of valid moves:```123
456
78.```Output {{-1}} if it is not reachable.

<<Example detailed:>> Possible in 3 moves```128       12.       123       123
356  -->  356  -->  .56  -->  456
7.4       784       784       78.```
=====  END  Statement =====


===== BEGIN Input Description =====
Three lines of three characters (containing each of the characters {{1}}-{{8}} and {{.}} exactly once).
=====  END  Input Description =====


===== BEGIN Output Description =====
One single integer corresponding to the smallest number of moves needed to reach the ordered configuration.
{{-1}} if it is not reachable.
=====  END  Output Description =====


===== BEGIN Constraints =====

=====  END  Constraints =====


===== BEGIN Input Test 0 =====
128
356
7.4
=====  END  Input Test 0 =====


===== BEGIN Output Test 0 =====
3
=====  END  Output Test 0 =====


===== BEGIN Input Validator 0 =====
.28
356
714
=====  END  Input Validator 0 =====


===== BEGIN Output Validator 0 =====
4
=====  END  Output Validator 0 =====


===== BEGIN Input Test 1 =====
674
.25
831
=====  END  Input Test 1 =====


===== BEGIN Output Test 1 =====
-1
=====  END  Output Test 1 =====


===== BEGIN Input Validator 1 =====
.67
835
214
=====  END  Input Validator 1 =====


===== BEGIN Output Validator 1 =====
-1
=====  END  Output Validator 1 =====


===== BEGIN Input Test 2 =====
348
1.2
576
=====  END  Input Test 2 =====


===== BEGIN Output Test 2 =====
-1
=====  END  Output Test 2 =====


===== BEGIN Input Validator 2 =====
542
6.8
137
=====  END  Input Validator 2 =====


===== BEGIN Output Validator 2 =====
-1
=====  END  Output Validator 2 =====


===== BEGIN Input Test 3 =====
864
251
.37
=====  END  Input Test 3 =====


===== BEGIN Output Test 3 =====
10
=====  END  Output Test 3 =====


===== BEGIN Input Validator 3 =====
417
.53
826
=====  END  Input Validator 3 =====


===== BEGIN Output Validator 3 =====
23
=====  END  Output Validator 3 =====


===== BEGIN Input Test 4 =====
.24
751
683
=====  END  Input Test 4 =====


===== BEGIN Output Test 4 =====
-1
=====  END  Output Test 4 =====


===== BEGIN Input Validator 4 =====
287
453
61.
=====  END  Input Validator 4 =====


===== BEGIN Output Validator 4 =====
-1
=====  END  Output Validator 4 =====


===== BEGIN Input Test 5 =====
648
357
21.
=====  END  Input Test 5 =====


===== BEGIN Output Test 5 =====
8
=====  END  Output Test 5 =====


===== BEGIN Input Validator 5 =====
7.1
852
463
=====  END  Input Validator 5 =====


===== BEGIN Output Validator 5 =====
15
=====  END  Output Validator 5 =====


===== BEGIN Input Test 6 =====
4.3
657
182
=====  END  Input Test 6 =====


===== BEGIN Output Test 6 =====
-1
=====  END  Output Test 6 =====


===== BEGIN Input Validator 6 =====
1.7
853
624
=====  END  Input Validator 6 =====


===== BEGIN Output Validator 6 =====
-1
=====  END  Output Validator 6 =====


===== BEGIN Input Test 7 =====
741
85.
263
=====  END  Input Test 7 =====


===== BEGIN Output Test 7 =====
13
=====  END  Output Test 7 =====


===== BEGIN Input Validator 7 =====
487
653
.21
=====  END  Input Validator 7 =====


===== BEGIN Output Validator 7 =====
26
=====  END  Output Validator 7 =====


===== BEGIN Input Test 8 =====
638
752
.41
=====  END  Input Test 8 =====


===== BEGIN Output Test 8 =====
-1
=====  END  Output Test 8 =====


===== BEGIN Input Validator 8 =====
8.7
653
412
=====  END  Input Validator 8 =====


===== BEGIN Output Validator 8 =====
-1
=====  END  Output Validator 8 =====


===== BEGIN Input Test 9 =====
362
.58
147
=====  END  Input Test 9 =====


===== BEGIN Output Test 9 =====
15
=====  END  Output Test 9 =====


===== BEGIN Input Validator 9 =====
874
251
63.
=====  END  Input Validator 9 =====


===== BEGIN Output Validator 9 =====
8
=====  END  Output Validator 9 =====


===== BEGIN Input Test 10 =====
647
352
.18
=====  END  Input Test 10 =====


===== BEGIN Output Test 10 =====
-1
=====  END  Output Test 10 =====


===== BEGIN Input Validator 10 =====
436
158
.27
=====  END  Input Validator 10 =====


===== BEGIN Output Validator 10 =====
-1
=====  END  Output Validator 10 =====


===== BEGIN Input Test 11 =====
813
.52
746
=====  END  Input Test 11 =====


===== BEGIN Output Test 11 =====
-1
=====  END  Output Test 11 =====


===== BEGIN Input Validator 11 =====
.14
658
273
=====  END  Input Validator 11 =====


===== BEGIN Output Validator 11 =====
-1
=====  END  Output Validator 11 =====


===== BEGIN Input Test 12 =====
236
15.
478
=====  END  Input Test 12 =====


===== BEGIN Output Test 12 =====
21
=====  END  Output Test 12 =====


===== BEGIN Input Validator 12 =====
648
.57
213
=====  END  Input Validator 12 =====


===== BEGIN Output Validator 12 =====
9
=====  END  Output Validator 12 =====


===== BEGIN Solution Language =====
string:Python3
=====  END  Solution Language =====


===== BEGIN Solution =====
#!/usr/bin/env python3

# Possible approaches:
#  - standard BFS (naive)
#  - cycle through the configurations space by local swaps
#  - explicit formula (below)

def dist(C):
    if C[4]!='5':
        return -1
    P = (0,5,6,1,8,3,2,7)
    S = [C[i] for i in P]
    i0 = S.index('.')
    S.pop(i0)
    i1 = S.index('1')
    if ''.join(S[i1:]+S[:i1])!='1672438':
        return -1
    if i1==0:
        return abs(i0-4)
    left  =   i0 + (6-i1)*8 + 4
    right = 7-i0 + (i1-1)*8 + 5
    return min(left,right)

print(dist(''.join(input() for _ in range(3))))
=====  END  Solution =====


===== BEGIN Stub =====
loop 3 read line:string(4)
write -1
=====  END  Stub =====



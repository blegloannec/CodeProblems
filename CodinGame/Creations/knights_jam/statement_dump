Title *
Knights Jam

Statement *

The <<knight>> is a chess piece that, when placed on the <<o>>-marked
square, can move to any of the <<x>>-marked squares (as long as they are
inside the board):```.x.x. x...x ..o.. x...x .x.x.``` Eight knights,
numbered from {{1}} to {{8}}, have been placed on a {{3}}×{{3}} board,
leaving one single square empty ({{.}}). They can neither attack each
other, nor share the same square, nor leave the board: the only valid
moves are <<jumps to the empty square>>. Compute the <<minimum number of
valid moves>> required to reach the following ordered configuration by
any sequence of valid moves:```123 456 78.```Output {{-1}} if it is not
reachable. <<Example detailed:>> Possible in 3 moves```128 12. 123 123
356 --> 356 --> .56 --> 456 7.4 784 784 78.```
Statement is mandatory
Cover

UPLOAD

  * Recommended size: 1920 x 1080px
  * Recommended document type: JPEG, PNG, GIF

Tags (up to 5)

chess
Combination puzzle
Fifteen puzzle
Difficulty *

Difficulty is mandatory
Input description *

Three lines of three characters (containing each of the characters
{{1}}-{{8}} and {{.}} exactly once).
Input description is mandatory
Output description *

One single integer corresponding to the smallest number of moves needed
to reach the ordered configuration. {{-1}} if it is not reachable.
Output description is mandatory
Constraints

Constraints are mandatory
Test cases *

Example
Edit title
Remove

128 356 7.4 3
Validator 1
Edit title
.28 356 714 4
------------------------------------------------------------------------
Central problem #1
Edit title
Remove

674 .25 831 -1
Validator 2
Edit title
.67 835 214 -1
------------------------------------------------------------------------
Central problem #2
Edit title
Remove

348 1.2 576 -1
Validator 3
Edit title
542 6.8 137 -1
------------------------------------------------------------------------
Reachable #1
Edit title
Remove

864 251 .37 10
Validator 4
Edit title
417 .53 826 23
------------------------------------------------------------------------
Unreachable #1
Edit title
Remove

.24 751 683 -1
Validator 5
Edit title
287 453 61. -1
------------------------------------------------------------------------
Reachable #2
Edit title
Remove

648 357 21. 8
Validator 6
Edit title
7.1 852 463 15
------------------------------------------------------------------------
Unreachable #2
Edit title
Remove

4.3 657 182 -1
Validator 7
Edit title
1.7 853 624 -1
------------------------------------------------------------------------
Reachable #3
Edit title
Remove

741 85. 263 13
Validator 8
Edit title
487 653 .21 26
------------------------------------------------------------------------
Unreachable #3
Edit title
Remove

638 752 .41 -1
Validator 9
Edit title
8.7 653 412 -1
------------------------------------------------------------------------
Reachable #4
Edit title
Remove

362 .58 147 15
Validator 10
Edit title
874 251 63. 8
------------------------------------------------------------------------
Unreachable #4
Edit title
Remove

647 352 .18 -1
Validator 11
Edit title
436 158 .27 -1
------------------------------------------------------------------------
Unreachable #5
Edit title
Remove

813 .52 746 -1
Validator 12
Edit title
.14 658 273 -1
------------------------------------------------------------------------
Reachable #5
Edit title
Remove

236 15. 478 21
Validator 13
Edit title
648 .57 213 9
ADD A TEST CASE
Solution language *

Solution language is mandatory
Solution *

  
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
#!/usr/bin/env python3
# Possible approaches:
#  - standard BFS (naive)
#  - cycle through the configurations space by local swaps
#  - explicit formula (below)
def dist(C):
    if C[4]!='5':
        return -1
    P = (0,5,6,1,8,3,2,7)
    S = [C[i] for i in P]
    i0 = S.index('.')
    S.pop(i0)
    i1 = S.index('1')
    if ''.join(S[i1:]+S[:i1])!='1672438':
        return -1
    if i1==0:
        return abs(i0-4)
    left  =   i0 + (6-i1)*8 + 4
    right = 7-i0 + (i1-1)*8 + 5
    return min(left,right)
print(dist(''.join(input() for _ in range(3))))
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
Solution is mandatory
Stub generator input *

  
1
2
loop 3 read line:string(4)
write -1
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
stubGenerator.

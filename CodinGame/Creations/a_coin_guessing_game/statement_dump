===== BEGIN Title =====
A Coin Guessing Game
=====  END  Title =====


===== BEGIN Statement =====
Yulia has annotated both sides of [[N]] identical coins with the numbers from 1 to 2×[[N]]. Each number has been used exactly <<once>> and each coin has received an <<odd>> number on one side and an <<even>> number on the other side. She asks Zack, who is aware of these rules but does not know the chosen distribution of numbers, to guess all the even/odd combinations by playing a little game.

Yulia shakes and throws the coins on the table and reveals the resulting (seemingly random) configuration to Zack, letting him see the numbers on the visible side of each coin. No other information can allow Zack to identify or distinguish the coins.

Yulia repeats that operation several times and, after [[T]] throws in total, stops and informs Zack he has seen enough to guess all the pairs of numbers on the coins.

<<Can you help Zack guess the numbers that were written on all of the coins?>>

<<Example>>: [[N]] = 3 coins, the numbers from {{1}} to {{6}} are used.
- First throw: {{3 1 6}}.
Zack learns that the even number {{6}} is not associated with the odd numbers {{1}} or {{3}}, hence it has to be paired with {{5}}.
- Second throw: {{4 1 6}}.
Zack learns that {{1}} is not paired with {{4}}. He also sees, for the second time, that it is not paired with {{6}}. So {{1}} it has to be paired with {{2}}, and consequently {{3}} is paired with {{4}}.
Solution: {{1}}/{{2}}, {{3}}/{{4}}, {{5}}/{{6}}. Expected output: {{2 4 6}}.
<<========>>

That said, Yulia has a secret criterion. She calls "coins ring" a sequence of numbers {{i1}}, {{i2}}, {{i3}}, ..., {{ik}}, such that all the coins {{i1}}/{{i2}}, {{i2}}/{{i3}}, ..., {{ik}}/{{i1}} are still acceptable assuming all possible "deductions" are made from the configurations that have been seen until now. She never stops before making sure that Zack can deductively get rid of all the coins rings.
=====  END  Statement =====


===== BEGIN Input Description =====
<<Line 1:>> Two space-separated integers [[N]] and [[T]] corresponding to the number of coins and the number of configurations to follow.
<<Next [[T]] lines:>> [[N]] space-separated integers, in no particular order, corresponding to the coin sides that Zack sees after each throw.
=====  END  Input Description =====


===== BEGIN Output Description =====
One line of [[N]] space-separated <<even>> integers corresponding to the even numbers written on the other side of the coin sides carrying the odd numbers 1, 3, 5, ..., 2×[[N]]-1 in order.
=====  END  Output Description =====


===== BEGIN Constraints =====
2 ≤ [[N]] ≤ 150
1 ≤ [[T]] ≤ 15
The given data guarantees a <<unique>> solution.
=====  END  Constraints =====


===== BEGIN Input Test 0 =====
2 3
4 2
2 4
4 3

=====  END  Input Test 0 =====


===== BEGIN Output Test 0 =====
4 2

=====  END  Output Test 0 =====


===== BEGIN Input Validator 0 =====
2 2
2 4
4 3

=====  END  Input Validator 0 =====


===== BEGIN Output Validator 0 =====
4 2

=====  END  Output Validator 0 =====


===== BEGIN Input Test 1 =====
3 2
3 1 6
4 1 6

=====  END  Input Test 1 =====


===== BEGIN Output Test 1 =====
2 4 6

=====  END  Output Test 1 =====


===== BEGIN Input Validator 1 =====
3 4
5 6 4
5 6 4
6 2 4
3 2 6

=====  END  Input Validator 1 =====


===== BEGIN Output Validator 1 =====
6 4 2

=====  END  Output Validator 1 =====


===== BEGIN Input Test 2 =====
4 3
4 1 8 6
5 6 8 1
6 3 1 4

=====  END  Input Test 2 =====


===== BEGIN Output Test 2 =====
2 8 4 6

=====  END  Output Test 2 =====


===== BEGIN Input Validator 2 =====
4 5
7 5 1 2
7 1 2 5
5 1 3 7
1 5 3 4
6 5 4 3

=====  END  Input Validator 2 =====


===== BEGIN Output Validator 2 =====
6 2 8 4

=====  END  Output Validator 2 =====


===== BEGIN Input Test 3 =====
5 4
2 10 6 3 5
5 1 9 3 2
9 8 10 4 7
4 1 9 5 2

=====  END  Input Test 3 =====


===== BEGIN Output Test 3 =====
10 4 8 2 6

=====  END  Output Test 3 =====


===== BEGIN Input Validator 3 =====
5 4
5 8 2 9 10
1 5 9 2 7
10 9 2 8 5
9 10 7 4 2

=====  END  Input Validator 3 =====


===== BEGIN Output Validator 3 =====
10 2 4 8 6

=====  END  Output Validator 3 =====


===== BEGIN Input Test 4 =====
10 9
14 1 15 13 2 7 16 19 11 4
11 13 12 16 18 2 4 8 6 14
1 2 19 10 20 12 14 4 16 15
18 3 14 17 11 2 7 15 19 20
18 10 6 2 14 15 4 13 12 16
10 9 18 15 4 12 5 3 19 13
1 11 20 7 2 14 19 4 16 15
11 19 17 15 7 2 13 3 14 1
14 10 13 17 6 9 1 7 3 8

=====  END  Input Test 4 =====


===== BEGIN Output Test 4 =====
18 16 14 12 2 10 20 8 4 6

=====  END  Output Test 4 =====


===== BEGIN Input Validator 4 =====
10 6
4 19 3 5 11 9 17 12 2 6
20 7 18 16 2 6 4 3 14 8
18 4 8 15 20 6 19 16 3 12
6 2 3 5 14 18 4 16 7 11
18 12 5 2 13 14 17 11 6 3
14 16 3 13 18 20 12 5 6 15

=====  END  Input Validator 4 =====


===== BEGIN Output Validator 4 =====
6 10 8 12 18 20 4 2 16 14

=====  END  Output Validator 4 =====


===== BEGIN Input Test 5 =====
25 7
45 16 28 49 14 41 38 34 43 23 27 25 30 9 50 29 37 36 24 5 22 46 39 15 35
5 48 21 38 43 47 41 15 22 28 7 4 23 8 33 6 12 35 30 20 32 1 13 34 45
16 31 46 23 48 37 15 41 19 21 12 34 18 5 6 8 33 29 17 2 14 13 35 30 49
27 37 38 28 8 9 17 29 16 43 41 47 3 10 50 7 45 40 34 21 49 44 5 39 36
7 3 44 9 50 29 13 22 37 19 24 26 41 47 28 18 6 39 49 34 25 43 10 35 16
7 45 14 40 5 49 17 25 4 28 23 39 34 6 19 13 29 12 43 24 41 15 33 1 3
3 22 27 49 33 34 15 25 42 28 26 16 37 47 43 48 24 12 18 44 19 20 13 7 35

=====  END  Input Test 5 =====


===== BEGIN Output Test 5 =====
16 30 26 46 12 34 36 10 22 38 24 44 8 6 20 28 50 40 4 48 42 2 18 14 32

=====  END  Output Test 5 =====


===== BEGIN Input Validator 5 =====
25 10
44 30 21 50 25 8 2 1 22 7 34 18 35 36 46 41 26 19 43 49 6 24 11 39 14
24 29 6 11 40 44 21 43 8 47 33 36 10 12 5 49 50 13 27 18 16 42 25 45 1
47 43 42 11 8 4 50 20 29 28 36 40 48 10 18 14 45 26 31 27 17 41 2 7 9
3 26 28 10 43 23 36 7 48 2 22 30 6 20 31 29 17 46 37 41 5 40 49 11 35
9 1 2 38 47 24 34 20 5 16 41 37 32 44 45 35 36 28 3 23 13 39 4 27 10
26 39 31 38 44 25 32 9 22 50 23 8 46 12 42 1 19 15 14 4 45 29 2 21 16
44 34 50 24 2 12 14 27 18 13 1 45 21 4 46 35 8 9 38 15 39 16 25 10 32
17 14 34 15 9 43 45 40 41 13 20 47 24 22 1 28 10 32 16 42 18 8 4 2 37
7 28 44 19 5 36 40 30 13 32 42 2 23 38 50 20 47 9 27 41 24 49 29 8 1
2 31 10 45 25 8 49 28 44 47 34 6 1 15 32 43 13 18 7 37 27 41 42 39 14

=====  END  Input Validator 5 =====


===== BEGIN Output Validator 5 =====
48 8 14 16 6 32 26 36 44 10 28 18 20 22 34 24 2 42 50 40 12 38 30 46 4

=====  END  Output Validator 5 =====


===== BEGIN Input Test 6 =====
50 12
79 8 86 54 99 68 72 4 88 87 100 37 33 76 65 95 74 51 62 94 10 28 92 46 7 84 24 66 25 16 27 53 85 64 13 49 59 48 17 12 32 90 77 35 82 43 26 42 3 75
47 12 50 66 77 16 32 24 82 69 45 78 7 53 51 52 8 13 46 14 79 100 11 74 58 2 91 1 62 96 22 73 34 42 88 10 38 6 89 31 23 4 63 81 28 56 37 80 99 87
90 75 87 24 58 15 86 79 51 8 32 57 69 88 83 21 76 25 11 13 100 31 49 38 55 22 26 35 59 77 30 64 37 99 72 16 29 14 89 34 47 44 63 95 50 62 85 41 10 42
30 58 84 31 99 50 1 82 54 71 55 98 70 3 37 26 49 5 83 100 2 87 29 66 13 56 79 81 61 7 96 45 97 28 62 6 17 90 32 33 52 75 94 69 73 67 74 27 93 92
38 63 50 72 55 99 48 40 76 11 86 42 43 98 64 74 26 93 44 6 70 69 56 54 52 46 13 10 36 53 82 49 67 2 91 32 16 62 24 75 3 79 39 4 22 21 57 96 17 89
40 60 58 22 62 78 71 1 49 65 20 72 84 21 68 85 81 44 9 12 41 29 59 93 67 16 48 15 10 2 90 13 57 30 52 33 45 70 14 37 95 42 92 83 23 94 54 34 98 39
78 29 67 24 89 74 88 21 66 41 39 56 77 64 90 80 33 2 65 36 60 26 34 48 51 76 58 9 11 25 44 1 6 72 87 83 84 10 69 62 99 54 96 42 17 53 18 22 16 55
77 80 9 69 15 42 6 4 27 58 51 2 79 1 20 56 3 17 54 57 93 44 18 100 48 71 33 30 8 29 40 91 64 63 89 96 72 11 97 25 23 78 21 61 41 19 36 65 12 81
98 43 11 41 87 29 57 37 34 75 17 79 86 61 76 62 89 4 67 65 18 27 74 95 9 20 52 63 68 39 73 7 35 80 30 56 5 54 91 23 33 88 97 70 71 21 31 12 45 6
22 3 64 26 32 56 5 83 68 63 20 24 52 50 82 40 86 7 47 100 81 17 16 58 95 31 70 18 62 60 80 12 2 51 67 15 72 61 90 89 11 30 46 36 38 93 28 57 6 78
27 11 14 41 88 72 76 7 35 89 20 83 8 95 78 31 9 61 25 34 69 33 6 50 54 29 36 1 85 60 5 13 97 100 30 51 45 91 21 62 66 12 58 80 63 71 74 40 26 77
63 72 48 68 12 77 8 60 9 39 54 38 35 45 16 44 28 40 43 50 18 11 56 83 57 99 71 53 37 93 74 82 25 61 92 75 95 6 49 90 19 22 98 81 1 34 14 26 46 5

=====  END  Input Test 6 =====


===== BEGIN Output Test 6 =====
86 34 42 44 32 94 18 74 14 62 28 26 52 22 46 48 38 2 36 100 82 58 64 54 80 98 30 12 66 6 10 84 50 8 68 24 72 78 70 60 76 4 56 40 92 90 88 96 16 20

=====  END  Output Test 6 =====


===== BEGIN Input Validator 6 =====
50 11
28 18 57 80 65 11 84 58 14 83 31 7 77 2 8 95 22 10 67 55 87 73 38 15 52 37 1 21 5 79 59 27 25 46 49 63 94 41 71 33 91 53 76 72 96 29 68 36 47 81
22 46 77 15 36 19 71 8 83 45 89 24 11 7 59 20 96 35 1 27 74 78 54 99 26 70 42 33 50 16 91 34 64 85 98 25 75 23 32 28 41 5 39 18 97 31 94 79 48 80
87 100 78 23 79 64 39 67 36 97 94 96 77 95 8 3 29 69 62 92 63 59 85 66 18 31 75 83 40 48 89 98 91 45 57 35 53 88 33 73 86 11 71 46 21 47 76 9 19 37
39 81 99 45 67 88 53 83 52 51 85 94 33 80 34 56 24 87 65 82 42 28 1 27 96 20 95 4 30 29 89 77 36 43 59 97 41 64 70 84 5 8 6 47 9 35 48 15 23 66
69 65 1 52 37 95 80 42 83 50 17 89 76 4 96 25 31 86 32 67 33 70 61 16 38 78 20 13 77 53 9 49 35 2 79 51 15 10 63 64 11 75 68 18 59 82 88 58 62 27
62 100 42 54 23 94 6 89 31 58 84 79 73 86 24 46 69 53 74 32 98 22 49 21 45 38 97 14 50 1 81 99 63 44 33 15 43 3 66 19 16 17 64 13 82 88 59 90 4 96
20 42 96 80 43 94 90 11 4 54 19 76 5 40 58 98 100 2 13 68 62 44 26 69 87 97 34 30 74 37 84 17 25 59 39 22 47 16 78 33 64 56 88 49 21 72 92 46 14 71
68 51 85 98 63 25 42 26 82 47 35 11 15 49 62 87 33 93 84 90 94 1 64 29 44 100 38 23 10 43 60 24 28 21 72 73 36 91 67 7 56 95 30 78 19 86 9 76 17 80
62 8 54 32 56 69 92 82 30 99 19 26 2 37 91 5 21 34 85 75 66 96 73 43 77 22 38 16 65 80 97 55 33 40 83 50 6 81 7 49 100 35 72 51 95 45 94 57 36 60
100 63 52 77 59 72 67 5 62 76 30 4 61 82 83 96 20 10 45 14 66 55 28 22 36 38 18 21 50 8 75 88 6 49 16 15 37 80 65 87 78 51 12 58 23 53 40 74 57 31
15 17 33 16 23 24 26 70 10 38 91 45 47 48 61 55 42 83 59 11 54 72 30 46 75 74 81 58 9 100 90 71 56 69 40 20 18 76 52 25 62 7 80 32 14 98 96 34 13 5

=====  END  Input Validator 6 =====


===== BEGIN Output Validator 6 =====
40 80 86 88 22 6 36 92 8 52 70 2 66 100 16 56 12 14 24 38 62 18 68 50 48 46 26 64 42 60 94 34 98 54 28 82 20 84 90 30 78 44 58 32 72 4 96 74 10 76

=====  END  Output Validator 6 =====


===== BEGIN Input Test 7 =====
100 12
78 104 170 181 72 41 8 66 122 63 79 150 27 35 42 9 44 1 47 140 137 100 91 195 87 30 15 77 163 36 95 129 56 190 192 17 186 89 94 24 38 139 162 153 86 58 172 43 31 81 196 187 159 131 110 133 126 156 185 120 74 13 60 97 88 184 90 167 113 34 164 128 130 177 82 193 49 147 29 75 116 199 12 4 188 145 65 25 70 121 108 141 2 168 71 157 143 5 111 173
115 128 20 77 173 111 103 35 195 188 54 65 199 16 163 10 148 69 75 171 81 29 139 41 113 160 26 190 150 119 175 67 76 6 117 25 84 38 179 114 14 34 138 167 166 57 7 143 194 193 4 170 141 30 27 64 19 66 123 191 43 112 39 45 51 168 33 36 70 5 120 161 181 137 55 42 61 183 126 129 49 135 149 106 59 28 192 79 89 131 53 196 40 144 140 134 95 105 197 164
98 41 57 117 195 1 91 95 161 90 16 65 169 18 147 131 135 186 48 58 50 198 25 179 92 151 184 29 164 93 200 61 5 42 165 38 159 174 45 191 148 108 47 56 188 32 126 94 156 121 134 30 23 120 192 145 162 157 13 46 104 116 113 82 77 199 52 196 96 140 63 11 70 107 114 12 17 100 71 182 54 84 153 119 166 149 88 83 189 129 193 132 103 105 2 144 76 124 180 68
54 122 110 182 33 165 169 112 5 129 27 106 193 180 77 119 176 97 190 183 125 35 49 42 172 161 102 63 98 117 166 55 29 186 118 76 137 87 68 171 18 194 96 133 101 162 23 83 37 184 82 114 17 36 56 113 141 185 156 73 121 20 86 198 173 79 6 57 163 66 147 99 132 195 53 116 61 103 109 64 131 197 15 4 21 7 127 100 62 196 179 91 146 123 47 168 44 174 3 10
72 146 58 18 71 5 186 113 130 127 122 177 194 181 6 110 169 119 190 165 22 145 40 88 163 107 32 90 138 55 86 4 109 184 189 199 38 80 155 172 93 30 108 28 148 62 185 187 87 70 150 81 49 140 61 85 82 69 101 79 161 178 137 19 7 50 14 174 95 153 132 160 133 198 131 143 106 104 1 193 162 76 170 12 46 96 156 15 44 57 99 166 68 175 118 141 29 24 26 21
15 97 197 47 123 62 155 53 29 68 40 28 177 1 128 7 55 160 77 120 82 64 143 188 73 80 93 105 140 182 153 89 186 144 122 117 56 48 109 133 194 126 9 189 106 45 130 72 190 6 3 96 158 139 67 49 12 66 111 83 195 78 57 104 46 90 173 102 5 132 118 91 4 60 131 26 85 137 71 191 172 38 116 176 34 51 81 124 166 23 25 185 161 32 164 79 187 113 69 156
102 43 80 127 194 198 35 137 63 58 4 165 68 49 44 95 125 17 156 84 89 103 9 150 121 41 140 179 48 86 149 21 90 65 109 181 64 22 99 14 92 161 24 73 19 187 67 33 3 23 172 88 27 69 110 13 193 189 60 163 5 78 167 51 146 55 177 133 29 185 190 126 34 12 40 148 98 66 7 111 136 138 71 196 8 93 106 1 42 50 59 186 108 77 20 143 87 154 116 166
188 10 111 117 80 65 181 169 153 103 30 93 158 190 107 9 197 98 22 48 95 165 92 154 133 64 14 163 13 97 8 101 187 110 179 56 173 3 33 52 144 83 121 28 167 35 40 106 156 54 42 157 38 185 63 96 74 55 61 7 59 67 102 86 139 75 51 69 170 41 136 31 174 171 115 21 192 140 36 180 164 44 196 58 146 5 135 4 12 29 47 15 116 53 27 119 77 71 149 200
51 160 90 183 55 30 26 133 72 156 37 186 167 178 78 93 170 92 176 158 3 188 150 81 35 108 189 125 8 96 155 163 29 113 123 177 74 48 27 174 192 24 182 112 65 137 68 103 84 114 42 159 16 22 173 144 105 6 49 147 97 17 146 61 94 198 33 67 82 126 18 91 165 127 153 116 100 145 53 157 10 34 11 129 191 102 166 151 47 5 9 180 66 21 62 122 131 135 56 86
116 105 138 196 80 55 27 117 60 37 174 157 53 154 161 121 103 104 150 167 43 76 46 195 192 59 7 5 63 48 77 58 38 106 135 182 73 147 50 64 134 153 19 99 49 115 97 164 93 191 119 84 193 13 70 45 114 17 118 51 122 100 185 23 126 120 124 111 112 42 102 146 179 41 34 156 177 31 57 180 198 107 14 79 171 184 108 75 4 152 36 200 151 128 1 98 144 95 113 12
5 173 62 171 7 96 159 109 35 69 59 134 47 174 40 121 58 167 125 101 105 112 68 136 127 158 26 161 11 42 104 165 49 54 80 102 65 12 146 27 189 168 157 9 1 122 21 24 116 196 18 45 141 51 191 77 148 22 39 131 19 184 135 70 190 145 179 66 37 186 16 15 79 13 28 166 8 2 181 30 144 14 180 130 150 153 137 197 29 169 61 119 170 139 81 163 53 114 188 95
71 175 168 131 95 192 132 160 197 1 106 3 186 122 174 92 23 33 143 139 138 78 19 29 140 129 60 32 182 130 126 188 110 43 68 102 41 194 191 98 147 88 84 158 4 163 156 65 63 86 38 58 195 66 179 13 46 16 171 97 184 28 73 87 82 189 8 150 49 91 134 54 190 142 9 20 127 128 24 48 31 146 2 135 162 200 42 173 7 77 187 18 183 100 161 34 21 64 136 155

=====  END  Input Test 7 =====


===== BEGIN Output Test 7 =====
10 70 142 94 76 4 6 84 28 56 120 170 146 32 152 166 104 46 140 156 62 96 86 138 52 162 88 2 8 82 60 26 118 184 100 112 30 68 178 92 98 150 42 144 174 14 168 176 148 188 126 130 110 66 192 18 136 186 24 78 160 58 38 164 80 154 134 172 200 198 48 180 64 40 122 190 20 196 194 106 74 124 128 132 34 90 50 116 54 72 182 12 16 114 36 44 158 22 108 102

=====  END  Output Test 7 =====


===== BEGIN Input Validator 7 =====
100 12
40 174 110 186 10 57 94 150 200 170 129 182 165 21 115 91 53 86 73 48 28 55 164 44 141 142 16 98 193 47 75 99 33 175 38 37 166 60 197 52 34 178 56 159 138 109 181 8 69 146 84 49 133 64 151 198 18 183 152 132 35 80 154 134 50 26 184 160 130 81 92 196 162 149 36 139 161 23 32 101 180 96 71 1 120 185 137 176 11 90 124 2 114 147 14 156 100 136 168 58
26 29 61 79 130 171 149 25 73 68 133 127 27 37 78 134 197 115 139 132 162 172 131 126 135 58 198 144 2 46 189 168 176 50 113 123 7 184 75 6 112 179 63 151 91 70 77 19 52 18 41 69 192 20 67 178 181 193 188 8 166 48 93 152 105 33 13 16 99 64 175 158 108 187 107 32 53 11 82 196 65 84 140 157 86 10 180 136 182 104 31 23 76 145 118 90 153 142 109 9
34 104 186 114 159 130 111 172 14 92 146 81 41 23 101 25 58 150 106 171 200 141 199 59 29 65 120 6 105 115 183 138 116 155 178 112 51 22 182 107 162 184 62 48 157 198 76 121 187 196 176 35 2 46 194 125 36 63 45 174 54 39 122 133 57 64 99 166 191 139 126 60 195 67 77 72 175 118 98 134 170 74 158 53 73 149 164 163 93 26 70 197 42 142 129 83 5 20 97 40
70 181 171 184 165 124 155 176 3 154 78 162 27 131 87 113 180 90 7 88 33 144 174 36 138 196 37 169 143 30 161 48 111 97 2 92 80 89 28 110 126 108 140 170 200 40 15 137 167 164 75 109 132 121 58 4 104 81 102 44 83 43 23 175 39 190 193 65 100 24 61 191 76 163 129 51 149 71 11 74 159 186 47 49 114 68 54 20 122 96 152 56 135 99 166 160 168 145 38 125
28 73 34 21 150 85 104 121 169 83 50 17 47 190 77 71 30 129 132 140 81 128 120 116 167 59 10 153 100 152 165 79 91 141 179 8 162 95 170 177 51 144 7 84 18 151 171 19 25 58 173 175 122 160 145 26 15 31 4 20 109 195 29 101 36 135 130 9 39 89 102 41 137 161 22 42 142 156 146 185 157 168 66 72 127 33 115 86 108 181 174 93 143 188 70 118 148 107 2 105
144 130 119 49 181 82 22 72 90 44 84 88 161 70 141 190 14 192 156 165 64 175 200 60 86 196 75 182 167 28 50 140 112 91 159 19 111 30 66 51 27 26 127 123 194 152 110 199 164 38 171 93 67 76 170 136 10 20 68 137 148 96 178 73 135 59 122 147 106 113 56 48 151 146 121 15 197 16 176 17 40 13 5 2 37 23 47 142 155 179 100 138 162 29 126 131 95 108 105 53
115 4 119 109 152 7 96 2 19 5 24 135 67 6 49 145 190 99 57 116 162 149 59 126 68 3 31 35 107 22 105 161 197 132 1 187 125 81 36 29 12 76 193 154 33 127 20 156 87 147 97 94 179 27 151 159 195 182 63 143 184 61 165 69 176 174 134 8 131 128 141 163 47 48 83 170 181 77 39 9 196 82 18 43 121 140 169 71 15 138 166 38 42 10 113 157 91 153 52 139
174 5 140 37 34 82 114 66 137 106 100 109 175 2 160 141 27 3 111 58 112 170 51 95 148 155 158 123 186 94 68 47 54 104 11 143 108 139 198 157 39 144 196 197 38 153 20 17 146 50 167 14 150 83 121 72 115 128 181 177 159 132 49 1 65 187 84 164 25 124 31 80 43 190 91 117 24 110 53 56 87 185 122 59 98 75 154 85 182 21 195 125 19 152 60 79 10 169 81 46
171 197 132 21 8 1 144 23 130 68 97 105 19 24 45 129 91 134 109 192 190 137 71 53 17 156 7 182 26 72 124 170 96 66 179 50 36 79 44 56 191 69 76 164 141 52 188 32 154 46 31 88 146 14 57 161 125 49 150 198 175 22 187 151 77 120 87 58 116 63 180 168 39 169 62 95 41 83 90 183 103 40 75 147 176 139 34 48 186 143 67 55 98 174 162 47 18 106 173 148
62 30 138 49 158 23 7 126 199 146 99 182 197 87 59 16 67 106 94 66 179 167 154 153 13 45 193 69 48 15 47 119 157 14 68 11 188 98 121 82 50 53 173 65 70 184 96 137 97 39 52 2 20 155 35 151 127 26 91 147 150 71 176 108 131 175 165 92 86 189 76 168 77 3 117 111 109 28 133 24 116 183 78 75 164 107 192 120 124 17 178 143 80 31 90 123 63 115 191 41
73 60 173 34 63 3 144 179 77 93 123 199 12 146 142 189 72 113 186 23 149 45 147 65 185 136 18 28 99 9 115 195 166 177 111 161 162 122 11 71 141 108 98 33 137 121 40 169 105 181 19 81 86 97 38 129 30 194 95 107 200 4 120 2 55 43 58 191 74 168 157 94 133 102 1 174 49 29 167 68 16 50 85 138 159 96 143 89 14 47 37 15 51 160 21 46 75 140 151 180
147 138 200 44 103 91 47 106 162 24 189 119 34 166 109 133 66 28 14 59 84 3 142 140 53 155 169 48 136 9 25 81 56 144 40 160 120 71 6 184 41 89 141 52 114 156 195 86 23 13 77 62 199 175 85 45 134 8 60 22 139 20 105 163 115 21 185 99 92 196 70 158 54 118 198 61 129 42 150 16 168 26 116 29 108 101 186 36 193 171 159 135 121 46 102 64 122 100 191 154

=====  END  Input Validator 7 =====


===== BEGIN Output Validator 7 =====
70 130 168 60 164 22 174 198 166 92 126 128 96 120 124 200 106 144 116 136 38 26 152 172 118 52 4 20 108 180 146 100 156 160 122 112 24 42 110 138 192 16 176 142 182 74 154 184 84 148 68 2 80 56 194 8 150 88 162 58 32 36 86 186 82 34 190 98 6 30 78 64 14 104 66 54 40 18 44 188 158 50 46 134 178 94 196 12 48 114 62 140 76 28 170 10 72 90 102 132

=====  END  Output Validator 7 =====


===== BEGIN Input Test 8 =====
150 15









272 296 42 236 234 175 184 126 95 55 232 287 136 190 108 171 230 27 297 156 86 124 7 50 15 298 226 60 73 249 10 49 284 198 208 89 207 239 268 291 202 97 280 242 151 293 44 300 279 33 197 94 290 43 240 200 189 19 30 299 196 164 160 28 142 112 93 185 65 61 41 135 222 118 96 137 56 8 157 154 294 128 167 78 12 20 150 64 23 218 66 91 63 176 235 119 179 170 62 161 54 295 90 278 241 214 139 40 217 237 101 168 75 5 116 36 270 98 265 6 259 69 213 133 203 219 288 74 17 18 84 143 144 70 39 194 286 181 271 11 209 183 122 115 58 153 158 275 16 255






=====  END  Input Test 8 =====


===== BEGIN Output Test 8 =====


=====  END  Output Test 8 =====


===== BEGIN Input Validator 8 =====
150 15
















=====  END  Input Validator 8 =====


===== BEGIN Output Validator 8 =====


=====  END  Output Validator 8 =====


===== BEGIN Solution Language =====
string:Python3
=====  END  Solution Language =====


===== BEGIN Solution =====
#!/usr/bin/env python3

# - Seeing the possibilities as a bipartite graph, the solution must to be
#   its unique perfect matching.
#   If this graph had no cycle (a forest), we could build the solution
#   by a greedy iterated leaf-cutting process.
#   The given criterion informally suggests us that a leaf-cutting
#   (deduction) process will always break the cycles so that we are in an
#   equivalent situation as the ideal one.
#    [NB (harder to see, stated here without a proof): This approach actually
#     always works provided that the graph has a unique perfect matching.
#     The given criterion is only there to help the solver convince himself that this
#     rather natural deduction process will work).]
# - Of course, a maximum bipartite matching approach is also possible and passes here.
# - Some efficient enough backtracking can also probably pass...
# Anyway, there is no need to know/understand that much to solve the puzzle.

def leaves_elim(Pairs):
    M = len(Pairs)
    Q = [i for i in range(M) if len(Pairs[i])==1]
    Sol = [None]*M
    while Q:
        u = Q.pop()
        if Pairs[u]:
            assert len(Pairs[u])==1
            v = Pairs[u].pop()
            Sol[u], Sol[v] = v, u
            while Pairs[v]:
                w = Pairs[v].pop()
                if w!=u:
                    Pairs[w].remove(v)
                    if len(Pairs[w])==1:
                        Q.append(w)
    return Sol

def main():
    N,T = map(int,input().split())
    M = 2*N
    Pairs = [set(range(1-i%2,M,2)) for i in range(M)]
    for _ in range(T):
        Conf = [int(c)-1 for c in input().split()]
        Even, Odd = [], []
        for c in Conf:
            (Even if c%2==0 else Odd).append(c)
        for e in Even:
            for o in Odd:
                Pairs[e].discard(o)
                Pairs[o].discard(e)
    Sol = leaves_elim(Pairs)
    assert None not in Sol
    print(*(Sol[i]+1 for i in range(0,M,2)))

main()
=====  END  Solution =====


===== BEGIN Stub =====
read N:int T:int
loop T loopline N C:int
write 2 4 6...

=====  END  Stub =====



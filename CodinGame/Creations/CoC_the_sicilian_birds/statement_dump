===== BEGIN Title =====
The Sicilian Birds
=====  END  Title =====


===== BEGIN Statement =====
A few birds of three different colors – <<A>>zure, <<B>>lack and <<C>>armine – sit in line on a wire.

Every time the clock tower bell rings, and as long as there are <<at least two>> birds, the <<first two birds>> in the line fly away, not to return, attracting however the attention of new birds.
If the <<first>> bird was...
 - ...<<A>>zure, then a <<B>>lack bird followed by a <<C>>armine one land at the end of the line;
 - ...<<B>>lack, then a single <<A>>zure bird lands at the end of the line;
 - ...<<C>>armine, then three <<A>>zure birds land at the end of the line;
independently of the color <<X>> of the second bird to fly away.
```AX(...)  -->  (...)BC
BX(...)  -->  (...)A
CX(...)  -->  (...)AAA```Emilia is fond of <<A>>zure birds. She takes a photograph each time there are only <<A>>zure birds on the wire.
Starting with a line of [[N]] <<A>>zure birds, and until there are less than two birds, <<how many birds are there on each of her successive photographs?>>
=====  END  Statement =====


===== BEGIN Input Description =====
One single integer [[N]] corresponding to the initial number of <<A>>zure birds on the wire.
=====  END  Input Description =====


===== BEGIN Output Description =====
One line per photograph, containing a single integer indicating the number of birds on Emilia's photograph.
=====  END  Output Description =====


===== BEGIN Constraints =====
1 < [[N]] < 1000

<<NB:>> In the given scenarios, Emilia always takes less than 100 photographs.
=====  END  Constraints =====


===== BEGIN Input Test 0 =====
4
=====  END  Input Test 0 =====


===== BEGIN Output Test 0 =====
4
2
1
=====  END  Output Test 0 =====


===== BEGIN Input Validator 0 =====
8
=====  END  Input Validator 0 =====


===== BEGIN Output Validator 0 =====
8
4
2
1
=====  END  Output Validator 0 =====


===== BEGIN Input Test 1 =====
3
=====  END  Input Test 1 =====


===== BEGIN Output Test 1 =====
3
5
8
4
2
1
=====  END  Output Test 1 =====


===== BEGIN Input Validator 1 =====
6
=====  END  Input Validator 1 =====


===== BEGIN Output Validator 1 =====
6
3
5
8
4
2
1
=====  END  Output Validator 1 =====


===== BEGIN Input Test 2 =====
18
=====  END  Input Test 2 =====


===== BEGIN Output Test 2 =====
18
9
14
7
11
17
26
13
20
10
5
8
4
2
1
=====  END  Output Test 2 =====


===== BEGIN Input Validator 2 =====
25
=====  END  Input Validator 2 =====


===== BEGIN Output Validator 2 =====
25
38
19
29
44
22
11
17
26
13
20
10
5
8
4
2
1
=====  END  Output Validator 2 =====


===== BEGIN Input Test 3 =====
147
=====  END  Input Test 3 =====


===== BEGIN Output Test 3 =====
147
221
332
166
83
125
188
94
47
71
107
161
242
121
182
91
137
206
103
155
233
350
175
263
395
593
890
445
668
334
167
251
377
566
283
425
638
319
479
719
1079
1619
2429
3644
1822
911
1367
2051
3077
4616
2308
1154
577
866
433
650
325
488
244
122
61
92
46
23
35
53
80
40
20
10
5
8
4
2
1
=====  END  Output Test 3 =====


===== BEGIN Input Validator 3 =====
323
=====  END  Input Validator 3 =====


===== BEGIN Output Validator 3 =====
323
485
728
364
182
91
137
206
103
155
233
350
175
263
395
593
890
445
668
334
167
251
377
566
283
425
638
319
479
719
1079
1619
2429
3644
1822
911
1367
2051
3077
4616
2308
1154
577
866
433
650
325
488
244
122
61
92
46
23
35
53
80
40
20
10
5
8
4
2
1
=====  END  Output Validator 3 =====


===== BEGIN Input Test 4 =====
587
=====  END  Input Test 4 =====


===== BEGIN Output Test 4 =====
587
881
1322
661
992
496
248
124
62
31
47
71
107
161
242
121
182
91
137
206
103
155
233
350
175
263
395
593
890
445
668
334
167
251
377
566
283
425
638
319
479
719
1079
1619
2429
3644
1822
911
1367
2051
3077
4616
2308
1154
577
866
433
650
325
488
244
122
61
92
46
23
35
53
80
40
20
10
5
8
4
2
1
=====  END  Output Test 4 =====


===== BEGIN Input Validator 4 =====
553
=====  END  Input Validator 4 =====


===== BEGIN Output Validator 4 =====
553
830
415
623
935
1403
2105
3158
1579
2369
3554
1777
2666
1333
2000
1000
500
250
125
188
94
47
71
107
161
242
121
182
91
137
206
103
155
233
350
175
263
395
593
890
445
668
334
167
251
377
566
283
425
638
319
479
719
1079
1619
2429
3644
1822
911
1367
2051
3077
4616
2308
1154
577
866
433
650
325
488
244
122
61
92
46
23
35
53
80
40
20
10
5
8
4
2
1
=====  END  Output Validator 4 =====


===== BEGIN Input Test 5 =====
915
=====  END  Input Test 5 =====


===== BEGIN Output Test 5 =====
915
1373
2060
1030
515
773
1160
580
290
145
218
109
164
82
41
62
31
47
71
107
161
242
121
182
91
137
206
103
155
233
350
175
263
395
593
890
445
668
334
167
251
377
566
283
425
638
319
479
719
1079
1619
2429
3644
1822
911
1367
2051
3077
4616
2308
1154
577
866
433
650
325
488
244
122
61
92
46
23
35
53
80
40
20
10
5
8
4
2
1
=====  END  Output Test 5 =====


===== BEGIN Input Validator 5 =====
874
=====  END  Input Validator 5 =====


===== BEGIN Output Validator 5 =====
874
437
656
328
164
82
41
62
31
47
71
107
161
242
121
182
91
137
206
103
155
233
350
175
263
395
593
890
445
668
334
167
251
377
566
283
425
638
319
479
719
1079
1619
2429
3644
1822
911
1367
2051
3077
4616
2308
1154
577
866
433
650
325
488
244
122
61
92
46
23
35
53
80
40
20
10
5
8
4
2
1
=====  END  Output Validator 5 =====


===== BEGIN Solution Language =====
string:Python3
=====  END  Solution Language =====


===== BEGIN Solution =====
#!/usr/bin/env python3

## Fastest mode?
# Several possible implementations. A really too clumsy one might time out
# but no tricks are required. The following is a possible / reasonable /
# expectable solution.

from collections import deque

Rule = [[1,2],[0],[0,0,0]]
Zero = [0,1,3]

N = int(input())
print(N)

Q = deque([0]*N)
while len(Q)>1:
    x = Q.popleft()
    y = Q.popleft()
    Q += Rule[x]
    N += Zero[x] - (x==0) - (y==0)
    if len(Q)==N:
        print(N)

## Shortest mode?
# Compact implementations are an option. Or analyze what the birds do
# and deduce a formula (which should be even shorter). Or guess that
# formula empirically (as one would do in reverse mode).

## No reverse mode?
# Would be possible, yet uninteresting, unoriginal and spoils the fun IMO.

## Who's Emilia?
# She works at the Syracuse post office. In Sicilia... unless it's NY state.


=====  END  Solution =====


===== BEGIN Stub =====
read N:int
write answer
=====  END  Stub =====



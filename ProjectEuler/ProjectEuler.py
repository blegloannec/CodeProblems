#!/usr/bin/python
#import sys
from fractions import gcd,Fraction
from math import *

#sys.setrecursionlimit(100000)

## Fonctions auxiliaires
def matrice(h,w,e):
    return [[e for j in range(w)] for i in range(h)]

def lcm(a,b):
    return a*b/gcd(a,b)

def somme_diviseurs(n):
    s = 1
    for i in range(2,int(sqrt(n))+1):
        if n%i==0:
            s += i+n/i
    return s

def nb_diviseurs(n):
    s = 2
    r = int(sqrt(n))
    if n%r==0:
        s += 1
    for i in range(2,r):
        if n%i==0:
            s += 2
    return s

def premier(n):
    if n<0 or n%2==0:
        return False
    for i in range(3,int(sqrt(n))+1,2):
        if n%i==0:
            return False
    return True

def eratosthene(n):
    l = range(2,n+1)
    s = int(sqrt(n))+1
    for i in range(2,s):
        k = 2
        while k*i<=n:
            l[k*i-2] = -1
            k += 1
    return filter((lambda(x):x>0),l)

def miroir(n):
    m = 0
    while n!=0:
        m = 10*m + n%10
        n /= 10
    return m

def palindrome(n):
    return miroir(n)==n

def taux_lettres(m):
    cpt = 0
    for c in m:
        if (ord('a')<=c and c<=ord('z')) or (ord('A')<=c and c<=ord('Z')):
            cpt += 1
    return float(cpt)/len(m)

def indice_coincidence(m):
    cpt = [0 for i in range(26)]
    N = 0
    for c in m:
        if ord('a')<=c and c<=ord('z'):
            cpt[c-ord('a')] += 1
            N += 1
        elif ord('A')<=c and c<=ord('Z'):
            cpt[c-ord('A')] += 1
            N += 1
    return float(sum(map((lambda(x):x*(x-1)),cpt)))/(N*(N-1))

def fraction_continue(x,n):
    a = int(floor(x))
    print a
    if n<=0:
        return [a]
    else:
        y = 1/(x-a)
        return fraction_continue(y,n-1).insert(0,a)

def fact(n):
    if n<2:
        return 1
    else:
        return n*fact(n-1)

def chiffres10(n):
    c = []
    while n>0:
        c.append(n%10)
        n /= 10
    return c

def somme_chiffres10(n):
    return sum(chiffres10(n))

def syracuse(n):
    if n%2==0:
        return n/2
    else:
        return 3*n+1

## Problemes

def problem1():
    s = 0
    for i in range(1000):
        if i%3==0 or i%5==0:
            s += i
    print s


def problem2():
    x0 = 1
    x1 = 2
    s = 0
    while x1<=4000000:
        if x1%2==0:
            s += x1
        svg = x1
        x1 += x0
        x0 = svg
    print s

def problem3():
    n = 600851475143
    s = int(sqrt(n))+1
    if s%2==0:
        s -= 1
    for i in range(s,2,-1):
        if n%i==0 and premier(i):
            print i
            return

def problem4():
    m = 0
    for i in range(100,1000):
        for j in range(100,i+1):
            p = i*j
            if p>m and palindrome(p):
                m = p
    print m

def problem5():
    l = 2
    for i in range(3,21):
        l = lcm(l,i)
    print l

def problem6():
    n = 100
    d = (n*(n+1)/2)**2-n*(n+1)*(2*n+1)/6
    print d

def problem7():
    print eratosthene(110000)[10000]

def problem8():
    s = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'
    n = len(s)
    m = 0
    for i in range(1,n-4):
        p = 1
        for j in range(5):
            p *= int(s[i+j])
        if p>m:
            m = p
    print m

def problem9():
    for a in range(1,1000):
        for b in range(1,a+1):
            c = sqrt(a*a+b*b)
            if int(c)==c and a+b+c==1000:
                c = int(c)
                print a, b, c, a*b*c

def problem10():
    print sum(eratosthene(2000000))

def problem11():
    n = 20
    M = [[8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8], [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0], [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65], [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91], [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80], [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50], [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70], [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21], [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72], [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95], [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92], [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57], [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58], [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40], [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66], [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69], [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36], [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16], [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54], [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]]
    pmax = 0
    for i in range(n-3):
        for j in range(n-3):
            p = M[i][j]*M[i+1][j]*M[i+2][j]*M[i+3][j]
            pmax = max(p,pmax)
            p = M[i][j]*M[i][j+1]*M[i][j+2]*M[i][j+3]
            pmax = max(p,pmax)
            p = M[i][j]*M[i+1][j+1]*M[i+2][j+2]*M[i+3][j+3]
            pmax = max(p,pmax)
            p = M[i+3][j]*M[i+2][j+1]*M[i+1][j+2]*M[i][j+3]
            pmax = max(p,pmax)
    print pmax

def problem12():
    n = 1
    nb = 1
    while nb_diviseurs(nb) < 500:
        n += 1
        nb = n*(n+1)/2
    print nb

def problem14():
    n = 1000001
    t = [-1 for i in range(n)]
    t[1] = 1
    def aux(s):
        if s>=n:
            return 1+aux(syracuse(s))
        elif t[s]<0:
            t[s] = 1+aux(syracuse(s))
        return t[s]
    cmax = 0
    for s in range(2,n):
        c = aux(s)
        if c>cmax:
            cmax = c
            smax = s
    print smax

def problem15():
    n = 20+1
    M = matrice(n,n,1)
    for i in range(1,n):
        for j in range(1,n):
            M[i][j] = M[i-1][j]+M[i][j-1]
    print M[n-1][n-1]

def problem16():
    print somme_chiffres10(2**1000)

def problem17():
    L0_19 = [0,3,3,5,4,4,3,5,5,4,3,6,6,8,8,7,7,9,8,8]
    L10 = [0,0,6,6,5,5,5,7,6,6]
    c = 0
    for i in range(1,1000):
        k,l = i%100, i/100
        if k<20:
            c += L0_19[k]
        else:
            c += L10[k/10]+L0_19[k%10]
        if l>0 and k>0:
            c+=3
        if l>=1:
            c += L0_19[l]+7
    print c+11
        
def problem20():
    print somme_chiffres10(fact(100))

def problem21():
    n = 10000
    nbs = range(2,n+1)
    sumdivs = map(somme_diviseurs,range(3*n))
    s = 0
    for a in nbs:
        if a!=sumdivs[a] and sumdivs[sumdivs[a]]==a:
            s += a
    print s

def problem25():
    phi = (1+sqrt(5))/2
    print int(ceil((999+log10(sqrt(5)))/log10(phi)))

def problem27():
    nmax = 0
    B = eratosthene(999)
    for a in range(-999,1000):
        for b in B:
            n = 1
            while premier(n*n+a*n+b):
                n += 1
            if n>nmax:
                nmax = n
                amax,bmax = a,b
    print nmax, amax, bmax, amax*bmax

def problem28():
    n = 1001
    s = 1
    for n in range(3,n+1,2):
        s += n*n + n*n-(n-1) + n*n-2*(n-1) + n*n-3*(n-1)
    print s

def problem29():
    l = []
    n = 100
    for a in range(2,n+1):
        for b in range(2,n+1):
            # h  = a**b
            # ou hashage malin :
            h = int(1000000*b*log(a))
            if h not in l:
                l.append(h)
    print len(l)

def problem30():
    # S(n) <= 9^5 log10(n)
    K = 9**5
    s = 0
    i = 2
    while i<K*ceil(log10(i)):
        c = chiffres10(i)
        if sum(map((lambda(x):x**5),c))==i:
            s += i
        i += 1
    print s

def problem33():
    l = []
    for p in range(1,9):
        for q in range(p+1,10):
            for a in range(1,10):
                pp = 10*a+p
                qq = 10*q+a
                if pp*q==qq*p:
                    l.append((pp,qq))
                pp = 10*p+a
                qq = 10*a+q
                if pp*q==qq*p:
                    l.append((pp,qq))
    print l
    r = 1
    for c in l:
        r *= Fraction(c[0],c[1])
    print r

def problem34():
    # S(n) <= 9! log10(n)
    K = fact(9)
    s = 0
    i = 10
    while i<K*ceil(log10(i)):
        c = chiffres10(i)
        if sum(map(fact,c))==i:
            s += i
        i += 1
    print s

def problem56():
    maxsum = 0
    for a in range(100):
        for b in range(100):
            maxsum = max(maxsum,somme_chiffres10(a**b))
    print maxsum

def problem58():
    n = 7
    nb = 8
    while 10*nb>2*n-1:
        n += 2
        if premier(n*n-(n-1)):
            nb += 1
        if premier(n*n-2*(n-1)):
            nb += 1
        if premier(n*n-3*(n-1)):
            nb += 1
    print n

def problem59():
    mess = [79,59,12,2,79,35,8,28,20,2,3,68,8,9,68,45,0,12,9,67,68,4,7,5,23,27,1,21,79,85,78,79,85,71,38,10,71,27,12,2,79,6,2,8,13,9,1,13,9,8,68,19,7,1,71,56,11,21,11,68,6,3,22,2,14,0,30,79,1,31,6,23,19,10,0,73,79,44,2,79,19,6,28,68,16,6,16,15,79,35,8,11,72,71,14,10,3,79,12,2,79,19,6,28,68,32,0,0,73,79,86,71,39,1,71,24,5,20,79,13,9,79,16,15,10,68,5,10,3,14,1,10,14,1,3,71,24,13,19,7,68,32,0,0,73,79,87,71,39,1,71,12,22,2,14,16,2,11,68,2,25,1,21,22,16,15,6,10,0,79,16,15,10,22,2,79,13,20,65,68,41,0,16,15,6,10,0,79,1,31,6,23,19,28,68,19,7,5,19,79,12,2,79,0,14,11,10,64,27,68,10,14,15,2,65,68,83,79,40,14,9,1,71,6,16,20,10,8,1,79,19,6,28,68,14,1,68,15,6,9,75,79,5,9,11,68,19,7,13,20,79,8,14,9,1,71,8,13,17,10,23,71,3,13,0,7,16,71,27,11,71,10,18,2,29,29,8,1,1,73,79,81,71,59,12,2,79,8,14,8,12,19,79,23,15,6,10,2,28,68,19,7,22,8,26,3,15,79,16,15,10,68,3,14,22,12,1,1,20,28,72,71,14,10,3,79,16,15,10,68,3,14,22,12,1,1,20,28,68,4,14,10,71,1,1,17,10,22,71,10,28,19,6,10,0,26,13,20,7,68,14,27,74,71,89,68,32,0,0,71,28,1,9,27,68,45,0,12,9,79,16,15,10,68,37,14,20,19,6,23,19,79,83,71,27,11,71,27,1,11,3,68,2,25,1,21,22,11,9,10,68,6,13,11,18,27,68,19,7,1,71,3,13,0,7,16,71,28,11,71,27,12,6,27,68,2,25,1,21,22,11,9,10,68,10,6,3,15,27,68,5,10,8,14,10,18,2,79,6,2,12,5,18,28,1,71,0,2,71,7,13,20,79,16,2,28,16,14,2,11,9,22,74,71,87,68,45,0,12,9,79,12,14,2,23,2,3,2,71,24,5,20,79,10,8,27,68,19,7,1,71,3,13,0,7,16,92,79,12,2,79,19,6,28,68,8,1,8,30,79,5,71,24,13,19,1,1,20,28,68,19,0,68,19,7,1,71,3,13,0,7,16,73,79,93,71,59,12,2,79,11,9,10,68,16,7,11,71,6,23,71,27,12,2,79,16,21,26,1,71,3,13,0,7,16,75,79,19,15,0,68,0,6,18,2,28,68,11,6,3,15,27,68,19,0,68,2,25,1,21,22,11,9,10,72,71,24,5,20,79,3,8,6,10,0,79,16,8,79,7,8,2,1,71,6,10,19,0,68,19,7,1,71,24,11,21,3,0,73,79,85,87,79,38,18,27,68,6,3,16,15,0,17,0,7,68,19,7,1,71,24,11,21,3,0,71,24,5,20,79,9,6,11,1,71,27,12,21,0,17,0,7,68,15,6,9,75,79,16,15,10,68,16,0,22,11,11,68,3,6,0,9,72,16,71,29,1,4,0,3,9,6,30,2,79,12,14,2,68,16,7,1,9,79,12,2,79,7,6,2,1,73,79,85,86,79,33,17,10,10,71,6,10,71,7,13,20,79,11,16,1,68,11,14,10,3,79,5,9,11,68,6,2,11,9,8,68,15,6,23,71,0,19,9,79,20,2,0,20,11,10,72,71,7,1,71,24,5,20,79,10,8,27,68,6,12,7,2,31,16,2,11,74,71,94,86,71,45,17,19,79,16,8,79,5,11,3,68,16,7,11,71,13,1,11,6,1,17,10,0,71,7,13,10,79,5,9,11,68,6,12,7,2,31,16,2,11,68,15,6,9,75,79,12,2,79,3,6,25,1,71,27,12,2,79,22,14,8,12,19,79,16,8,79,6,2,12,11,10,10,68,4,7,13,11,11,22,2,1,68,8,9,68,32,0,0,73,79,85,84,79,48,15,10,29,71,14,22,2,79,22,2,13,11,21,1,69,71,59,12,14,28,68,14,28,68,9,0,16,71,14,68,23,7,29,20,6,7,6,3,68,5,6,22,19,7,68,21,10,23,18,3,16,14,1,3,71,9,22,8,2,68,15,26,9,6,1,68,23,14,23,20,6,11,9,79,11,21,79,20,11,14,10,75,79,16,15,6,23,71,29,1,5,6,22,19,7,68,4,0,9,2,28,68,1,29,11,10,79,35,8,11,74,86,91,68,52,0,68,19,7,1,71,56,11,21,11,68,5,10,7,6,2,1,71,7,17,10,14,10,71,14,10,3,79,8,14,25,1,3,79,12,2,29,1,71,0,10,71,10,5,21,27,12,71,14,9,8,1,3,71,26,23,73,79,44,2,79,19,6,28,68,1,26,8,11,79,11,1,79,17,9,9,5,14,3,13,9,8,68,11,0,18,2,79,5,9,11,68,1,14,13,19,7,2,18,3,10,2,28,23,73,79,37,9,11,68,16,10,68,15,14,18,2,79,23,2,10,10,71,7,13,20,79,3,11,0,22,30,67,68,19,7,1,71,8,8,8,29,29,71,0,2,71,27,12,2,79,11,9,3,29,71,60,11,9,79,11,1,79,16,15,10,68,33,14,16,15,10,22,73]
    lmess = len(mess)
    maxind = 0
    for a in range(26):
        for b in range(26):
            for c in range(26):
                key = [a+97,b+97,c+97]
                dmess = []
                k = 0
                for i in range(lmess):
                    dmess.append(mess[i] ^ key[k])
                    k = (k+1)%3
                ind = taux_lettres(dmess)
                if ind>maxind:
                    maxind = ind
                    maxkey = key
                    maxmess = dmess
    print maxind
    print ''.join(map(chr,maxkey))
    print ''.join(map(chr,maxmess))
    print sum(maxmess)

def problem65():
    f = [2]
    for i in range(34):
        f += [1,2*(i+1),1]
    # rationnels de la fraction continue
    p0,p1 = 0,1
    #q0,q1 = 1,0
    for i in range(100):
        p1,p0 = p1*f[i]+p0,p1
        #q1,q0 = q1*f[i]+q0,q1
    print somme_chiffres10(p1)

def problem66():
    quit()

def problem380():
    m = 500
    n = 100
    res = Decimal(1)
    for k in range(1,n):
        for h in range(1,m):
            res *= 4*sin(h*pi/(2*m))**2+4*sin(k*pi/(2*n))**2
            print res
    print res

def main():
    problem380()

main()
